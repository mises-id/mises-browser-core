diff --git a/chrome/browser/download/android/java/src/org/chromium/chrome/browser/download/DownloadDialogBridge.java b/chrome/browser/download/android/java/src/org/chromium/chrome/browser/download/DownloadDialogBridge.java
index 3f677bcd8041ada5525f81bbc7b894a5a363dc2d..43ff5c191ca12b61b5cce50a7f761395a28687ef 100644
--- a/chrome/browser/download/android/java/src/org/chromium/chrome/browser/download/DownloadDialogBridge.java
+++ b/chrome/browser/download/android/java/src/org/chromium/chrome/browser/download/DownloadDialogBridge.java
@@ -27,6 +27,28 @@ import org.chromium.ui.base.WindowAndroid;
 import org.chromium.ui.modaldialog.ModalDialogManager;
 import org.chromium.ui.modaldialog.ModalDialogManagerHolder;
 
+import org.chromium.base.Log;
+import android.view.View;
+import org.chromium.base.ContextUtils;
+import android.graphics.Color;
+import android.graphics.drawable.ColorDrawable;
+import android.widget.ListView;
+import android.content.Context;
+import android.widget.ListView;
+import android.content.pm.PackageManager;
+import android.content.Intent;
+import android.content.Context;
+import android.content.pm.ResolveInfo;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Locale;
+import android.net.Uri;
+import android.text.TextUtils;
+import android.content.pm.PackageManager.NameNotFoundException;
+import android.content.ActivityNotFoundException;
+import android.net.Uri;
+import java.io.File;
+
 /** Glues download dialogs UI code and handles the communication to download native backend. */
 public class DownloadDialogBridge implements DownloadLocationDialogController {
     private long mNativeDownloadDialogBridge;
@@ -64,6 +86,51 @@ public class DownloadDialogBridge implements DownloadLocationDialogController {
         mLocationDialog.destroy();
     }
 
+    private boolean downloadWithAdm(WindowAndroid windowAndroid, long totalBytes,
+           String suggestedPath, String urlToDownload) {
+        Activity activity = (Activity) windowAndroid.getActivity().get();
+        // If the activity has gone away, just clean up the native pointer.
+        if (activity == null) {
+            return false;
+        }
+
+        boolean useAdmIfPossible = ContextUtils.getAppSharedPreferences().getBoolean("enable_external_download_manager", false);
+        String activeDownloadManagerActivityName = ContextUtils.getAppSharedPreferences().getString("selected_external_download_manager_activity_name", "");
+        String activeDownloadManagerPackageName = ContextUtils.getAppSharedPreferences().getString("selected_external_download_manager_package_name", "");
+
+        if (useAdmIfPossible && 
+            !TextUtils.isEmpty(activeDownloadManagerPackageName) && 
+            !TextUtils.isEmpty(activeDownloadManagerActivityName) && 
+            activeDownloadManagerPackageName.equals("site.mises.browser_stable") != true && 
+            !TextUtils.isEmpty(urlToDownload) && 
+            (urlToDownload.toLowerCase(Locale.ROOT).startsWith("http:") || urlToDownload.toLowerCase(Locale.ROOT).startsWith("https:") || urlToDownload.toLowerCase(Locale.ROOT).startsWith("magnet:") || urlToDownload.toLowerCase(Locale.ROOT).startsWith("ftp:"))) {
+            if (urlToDownload.toLowerCase(Locale.ROOT).contains(".googleusercontent.com/crx"))
+                return false;
+            Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(urlToDownload));
+//            intent.addCategory("android.intent.category.BROWSABLE");
+            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+            intent.setClassName(activeDownloadManagerPackageName, activeDownloadManagerActivityName);
+
+            intent.putExtra("android.intent.extra.TEXT", urlToDownload);
+
+            // ADM
+            intent.putExtra("com.android.extra.filename", new File(suggestedPath).getName());
+
+            // MXPlayer
+            intent.putExtra("title", new File(suggestedPath).getName());
+            intent.putExtra("filename", new File(suggestedPath).getName());
+
+            try {
+                Log.i("Mises", "[Download] Starting activity intent [" + activeDownloadManagerPackageName + "/" + activeDownloadManagerActivityName + "]");
+                activity.startActivity(intent);
+                return true;
+            } catch (ActivityNotFoundException exception) {
+                Log.i("Mises", "[Download] Starting activity intent: ActivityNotFoundException");
+            }
+        }
+        return false;
+    }
+
     @CalledByNative
     private void showDialog(
             WindowAndroid windowAndroid,
@@ -71,7 +138,7 @@ public class DownloadDialogBridge implements DownloadLocationDialogController {
             @ConnectionType int connectionType,
             @DownloadLocationDialogType int dialogType,
             String suggestedPath,
-            Profile profile) {
+            Profile profile, String urlToDownload) {
         mWindowAndroid = windowAndroid;
         mProfile = profile;
         Activity activity = windowAndroid.getActivity().get();
@@ -79,6 +146,11 @@ public class DownloadDialogBridge implements DownloadLocationDialogController {
             onCancel();
             return;
         }
+        if (downloadWithAdm(windowAndroid, totalBytes, suggestedPath, urlToDownload)) {
+            onCancel();
+            return;
+        }
+
 
         DownloadDirectoryProvider.getInstance()
                 .getAllDirectoriesOptions(
