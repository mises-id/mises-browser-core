import("//mises/build/config.gni")
import("//build/buildflag_header.gni")
import("//build/config/features.gni")
import("//chrome/common/features.gni")

buildflag_header("sparkle_buildflags") {
  header = "sparkle_buildflags.h"
  flags = [ "ENABLE_SPARKLE=$enable_sparkle" ]
}

if (enable_sparkle && !build_sparkle) {
  bundle_data("prebuilt_sparkle_framework_bundle_data") {
    sources = [ "//build/mac_files/sparkle_binaries/Sparkle.framework" ]
    outputs = [ "{{bundle_contents_dir}}/Frameworks/{{source_file_part}}" ]
  }
}

source_set("browser_process") {
  visibility = [
    "//mises/browser/*",
    "//chrome/browser/*",
  ]

  sources = [ "mises_browser_process.h" ]

  deps = [
    "//chrome/browser:browser_process",
    "//extensions/buildflags",
    "//mises/components/ipfs/buildflags",
  ]
}

group("browser") {
  visibility = [
    "//mises:browser_dependencies",
    "//mises/browser/*",
    "//mises/test:*",

    # these are layering violation and need to be fixed
  ]

  if (enable_sparkle) {
    if (build_sparkle) {
      deps = [ "//mises/vendor/sparkle:sparkle_framework_bundle_data" ]
    } else {
      deps = [ ":prebuilt_sparkle_framework_bundle_data" ]
    }
  }

  # Group depending on upstream's counterpart to make it easier to manage
  # dependencies in mises/ (//chrome/browser does not depend on this target
  # so //mises/browser becomes essentially an alias for //chrome/browser now).
  public_deps = [ "//chrome/browser" ]
}

source_set("unit_tests") {
  testonly = true

  sources = []
  deps = []

  if (is_win) {
    sources += [ "default_protocol_handler_utils_win_unittest.cc" ]

    deps += [
      "//mises",
      "//mises/browser",
      "//testing/gtest",
    ]
  }
}
